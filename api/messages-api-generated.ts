/* tslint:disable */
/* eslint-disable */
/*
Channel API

Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.

With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InboundMessage } from '../models';
// @ts-ignore
import { InboundMessageMetadata } from '../models';
// @ts-ignore
import { InboundMessageSender } from '../models';
// @ts-ignore
import { MessagesImportReceivedMessageResponse } from '../models';
// @ts-ignore
import { OutboundMessage } from '../models';
// @ts-ignore
import { OutboundMessageToInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Import a message that was received by the channel.
         * @summary Sync inbound message
         * @param {string} channelId The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {InboundMessage} [inboundMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importReceivedMessage: async (channelId: string, inboundMessage?: InboundMessage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('importReceivedMessage', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}/inbound_messages`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: inboundMessage,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/inbound_messages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(inboundMessage, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Import a message that was sent from the channel.
         * @summary Sync outbound message
         * @param {string} channelId The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         * @param {OutboundMessage} [outboundMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importSyncedMessage: async (channelId: string, outboundMessage?: OutboundMessage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('importSyncedMessage', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}/outbound_messages`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: outboundMessage,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/outbound_messages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(outboundMessage, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Import a message that was received by the channel.
         * @summary Sync inbound message
         * @param {MessagesApiImportReceivedMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importReceivedMessage(requestParameters: MessagesApiImportReceivedMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesImportReceivedMessageResponse>> {
            const inboundMessage: InboundMessage = {
                sender: requestParameters.sender,
                subject: requestParameters.subject,
                body: requestParameters.body,
                metadata: requestParameters.metadata,
                delivered_at: requestParameters.delivered_at,
                attachments: requestParameters.attachments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.importReceivedMessage(requestParameters.channelId, inboundMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Import a message that was sent from the channel.
         * @summary Sync outbound message
         * @param {MessagesApiImportSyncedMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importSyncedMessage(requestParameters: MessagesApiImportSyncedMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesImportReceivedMessageResponse>> {
            const outboundMessage: OutboundMessage = {
                sender_name: requestParameters.sender_name,
                to: requestParameters.to,
                subject: requestParameters.subject,
                author_id: requestParameters.author_id,
                body: requestParameters.body,
                metadata: requestParameters.metadata,
                delivered_at: requestParameters.delivered_at,
                attachments: requestParameters.attachments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.importSyncedMessage(requestParameters.channelId, outboundMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * Import a message that was received by the channel.
         * @summary Sync inbound message
         * @param {MessagesApiImportReceivedMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importReceivedMessage(requestParameters: MessagesApiImportReceivedMessageRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesImportReceivedMessageResponse> {
            return localVarFp.importReceivedMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Import a message that was sent from the channel.
         * @summary Sync outbound message
         * @param {MessagesApiImportSyncedMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importSyncedMessage(requestParameters: MessagesApiImportSyncedMessageRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesImportReceivedMessageResponse> {
            return localVarFp.importSyncedMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for importReceivedMessage operation in MessagesApi.
 * @export
 * @interface MessagesApiImportReceivedMessageRequest
 */
export type MessagesApiImportReceivedMessageRequest = {
    
    /**
    * The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof MessagesApiImportReceivedMessage
    */
    readonly channelId: string
    
} & InboundMessage

/**
 * Request parameters for importSyncedMessage operation in MessagesApi.
 * @export
 * @interface MessagesApiImportSyncedMessageRequest
 */
export type MessagesApiImportSyncedMessageRequest = {
    
    /**
    * The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    * @type {string}
    * @memberof MessagesApiImportSyncedMessage
    */
    readonly channelId: string
    
} & OutboundMessage

/**
 * MessagesApiGenerated - object-oriented interface
 * @export
 * @class MessagesApiGenerated
 * @extends {BaseAPI}
 */
export class MessagesApiGenerated extends BaseAPI {
    /**
     * Import a message that was received by the channel.
     * @summary Sync inbound message
     * @param {MessagesApiImportReceivedMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiGenerated
     */
    public importReceivedMessage(requestParameters: MessagesApiImportReceivedMessageRequest, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).importReceivedMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Import a message that was sent from the channel.
     * @summary Sync outbound message
     * @param {MessagesApiImportSyncedMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiGenerated
     */
    public importSyncedMessage(requestParameters: MessagesApiImportSyncedMessageRequest, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).importSyncedMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
